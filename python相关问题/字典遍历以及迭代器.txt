for语句遍历字典其实是遍历字典的键，通过键完成对字典的真正遍历
>>> d = {'x':1, 'y':2, 'z':3}	  
>>> d	  
{'x': 1, 'y': 2, 'z': 3}
>>> for i in d:
	  print(i)	  
x
y
z

for i in d:
	  print(i,"=",d[i])

	  
x = 1
y = 2
z = 3

>>> d.items()	  
dict_items([('x', 1), ('y', 2), ('z', 3)])
>>> for keys,values in d.items():
	  print(keys,values)	  
x 1
y 2
z 3
迭代器：
list、tuple等都是可迭代对象，我们可以通过iter()函数获取这些可迭代对象的迭代器。
然后我们可以对获取到的迭代器不断使用next()函数来获取下一条数据。iter()函数实际上就是调用了可迭代对象的 
   __iter__ 用法。

>>> string="wusurong"
	  
>>> string
	  
'wusurong'
>>> it=iter(string)
	  
>>> 
	  
>>> next(it)
	  
'w'
>>> next(it)
	  
'u'
>>> next(it)
	  
's'
>>> next(it)
	  
'u'
>>> next(it)
	  
'r'
>>> next(it)
	  
'o'
>>> next(it)
	  
'n'
>>> next(it)
	  
'g'
>>> next(it)
	  
Traceback (most recent call last):
  File "<pyshell#69>", line 1, in <module>
    next(it)
StopIteration


class test():
    def __init__(self,data=1):
        self.data = data

    def __iter__(self):
        return self
    def __next__(self):
        if self.data > 5:
            raise StopIteration
        else:
            self.data+=1
        return self.data


>>> for item in test(3):
	  print(item)

	  
4
5
6
for … in… 这个语句其实做了两件事。第一件事是获得一个可迭代器，即调用了__iter__()函数。 
第二件事是循环的过程，循环调用__next__()函数。
对于test这个类来说，它定义了__iter__和__next__函数，所以是一个可迭代的类，
也可以说是一个可迭代的对象（Python中一切皆对象）。
含有__next__()函数的对象都是一个迭代器，所以test也可以说是一个迭代器。
、如果去掉__itet__()函数，test这个类也不会报错。



生成器：带有 yield 的函数在 Python 中被称之为 generator（生成器）
简单地讲，yield 的作用就是把一个函数变成一个 generator，带有 yield 的函数不再是一个普通函数，
Python 解释器会将其视为一个 generator，调用 fab(5) 不会执行 fab 函数，而是返回一个 iterable 对象！
在 for 循环执行时，每次循环都会执行 fab 函数内部的代码，执行到 yield b 时，fab 函数就返回一个迭代值，
下次迭代时，代码从 yield b 的下一条语句继续执行，而函数的本地变量看起来和上次中断执行前是完全一样的，
于是函数继续执行，直到再次遇到 yield。

一个带有 yield 的函数就是一个 generator，它和普通函数不同，生成一个 generator 看起来像函数调用，
但不会执行任何函数代码，直到对其调用 next()（在 for 循环中会自动调用 next()）才开始执行。
虽然执行流程仍按函数的流程执行，但每执行到一个 yield 语句就会中断，并返回一个迭代值，
下次执行时从 yield 的下一个语句继续执行。看起来就好像一个函数在正常执行的过程中被 yield 中断了数次，
每次中断都会通过 yield 返回当前的迭代值。yield 的好处是显而易见的，
把一个函数改写为一个 generator 就获得了迭代能力，比起用类的实例保存状态来计算下一个 next() 的值，
不仅代码简洁，而且执行流程异常清晰。
例子：
>> def fab(max):
	  n,a,b=0,0,1
	  while n<max:
	      yield b
	      a,b=b,a+b
	      n=n+1
>>> f=fab(10)
>>> f.__next__()
	  
1
>>> f.__next__()
	  
1
>>> f.__next__()
	  
2
>>> f.__next__()
	  
3
>>> f.__next__()
	  
5
>>> f.__next__()
	  
8
>>> f.__next__()
	  
13
>>> f.__next__()
	  
21
>>> f.__next__()
	  
34
>>> f.__next__()
	  
55
>>> f.__next__()
	  
Traceback (most recent call last):
  File "<pyshell#131>", line 1, in <module>
    f.__next__()
StopIteration


>>> for n in fab(12):
	  print(n)

	  
1
1
2
3
5
8
13
21
34
55
89
144

	  