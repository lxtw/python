发现实例化对象的时候，调用__init__()初始化之前，先调用了__new__()方法

__new__()必须要有返回值，返回实例化出来的实例，需要注意的是，可以return父类__new__()出来的实例，
也可以直接将object的__new__()出来的实例返回。

__init__()有一个参数self，该self参数就是__new__()返回的实例，__init__()在__new__()的基础上可
以完成一些其它初始化的动作，__init__()不需要返回值。

若__new__()没有正确返回当前类cls的实例，那__init__()将不会被调用，即使是父类的实例也不行。

我们可以将类比作制造商，__new__()方法就是前期的原材料购买环节，__init__()方法就是在有原材料的基础上，
加工，初始化商品环节。

 class CapStr(str):
	def __new__(cls,string):
		string=string.upper()
		return str.__new__(cls,string)

	
 a=CapStr("I love FishC.com")
 a='I LOVE FISHC.COM'


过程：
CapStr("I love FishC.com")----->__new__(CapStr,"I love FishC.com")----->string="I love FishC.com".upper()/
//string='I LOVE FISHC.COM'----->str.__new__(str,'I LOVE FISHC.COM')----->a---
--> __init__(a,'I LOVE FISHC.COM')---->实例化完成

这里返回的是str的对象，即返回的是字符串对象



class Demo(object):
  
def __init__(self):
    print '__init__() called...'
 

 def __new__(cls, *args, **kwargs):
    print '__new__() - {cls}'.format(cls=cls）
    return object.__new__(cls, *args, **kwargs)
 
if __name__ == '__main__':
  de = Demo()

类的实例化过程：
当执行de = Demo()时，系统会自动首先在后台执行__new__(cls,参数)函数，返回出类Demo的一个实例，但这个实例是没有经过
初始化的，当创建出实例以后，系统会再次自动执行__init__（self）初始化函数，self会自动传给__init__（self）初始化函数，
进行实例的初始化，这就完成了类的实例化的整个过程。




__del__()方法的理解：
当没有一个变量指向对象的时候，__del__()会自动执行垃圾的回收

class C:
	def __init__(self):
		print("我是__init__方法，我被调用了")
	def __del__(self):
	        print("我是__del__方法，我被调用了")

	        
>>> 
>>> 
>>> c1=C()
我是__init__方法，我被调用了
>>> c2=c1
>>> c3=c1
>>> c4=c2
>>> del c1
>>> del c2
>>> del c3
>>> del c4
我是__del__方法，我被调用了

因为没有任何一个变量指向C（）这个对象了，__del__方法被触发执行
